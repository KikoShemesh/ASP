// <auto-generated />
using System;
using AspApp.api.DB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AspApp.api.Migrations
{
    [DbContext(typeof(IsraelTrailContext))]
    [Migration("20230201135442_InitilizeMigration")]
    partial class InitilizeMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AspApp.api.Models.Domain.Difficulty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Difficalty");
                });

            modelBuilder.Entity("AspApp.api.Models.Domain.Road", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DifficaltyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Lengh")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SegmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TripId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DifficaltyId");

                    b.HasIndex("SegmentId");

                    b.ToTable("Roads");
                });

            modelBuilder.Entity("AspApp.api.Models.Domain.Segment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Area")
                        .HasColumnType("float");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Long")
                        .HasColumnType("float");

                    b.Property<long>("Population")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Segment");
                });

            modelBuilder.Entity("AspApp.api.Models.Domain.Road", b =>
                {
                    b.HasOne("AspApp.api.Models.Domain.Difficulty", "Difficalty")
                        .WithMany()
                        .HasForeignKey("DifficaltyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AspApp.api.Models.Domain.Segment", "Segment")
                        .WithMany("Paths")
                        .HasForeignKey("SegmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Difficalty");

                    b.Navigation("Segment");
                });

            modelBuilder.Entity("AspApp.api.Models.Domain.Segment", b =>
                {
                    b.Navigation("Paths");
                });
#pragma warning restore 612, 618
        }
    }
}
